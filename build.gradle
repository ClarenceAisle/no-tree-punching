buildscript {
    repositories {
        maven {
            url = 'https://maven.minecraftforge.net'
        }
        maven {
            url "https://repo.spongepowered.org/repository/maven-public/"
            content { includeGroup "org.spongepowered" }
        }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'net.minecrell.licenser' version '0.4.1'
    id 'idea'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'

// Allow local mappings customization
def localProperties = new File('./dev.gradle')
localProperties.createNewFile()

apply from: 'dev.gradle'

def mappingsChannel = project.hasProperty('mappings_channel') ? mappings_channel : 'official'
def mappingsVersion = project.hasProperty('mappings_version') ? mappings_version : mc_version
println 'Using mappings: ' + mappingsChannel + ' / ' + mappingsVersion

// Use version from environment variable, if set
def envVersion = System.getenv('VERSION')
version = envVersion == null ? 'indev' : envVersion

mod_id = 'notreepunching'
group = "com.alcatrazescapee.${mod_id}"
archivesBaseName = "${mod_id}-forge-${mc_version}"
sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenLocal()
    maven {
        // JEI
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // Mirror for JEI
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven {
        // mcjunitlib
        url = 'https://jitpack.io'
    }
    flatDir {
        dirs 'libs'
    }
}

minecraft {
    mappings channel: mappingsChannel, version: mappingsVersion
    //accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Run configurations
    runs {
        client {
            workingDirectory project.file('run')
            arg '-mixin.config=' + mod_id + '.mixins.json'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                notreepunching {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            arg '-mixin.config=' + mod_id + '.mixins.json'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                notreepunching {
                    source sourceSets.main
                }
            }
        }

        serverTest {
            parent runs.server
            workingDirectory project.file('run')
            main 'com.alcatrazescapee.mcjunitlib.DedicatedTestServerLauncher'
            ideaModule "${project.name}.test"
            property 'forge.logging.console.level', 'unittest'
            environment 'MOD_CLASSES', String.join(File.pathSeparator, "${mod_id}%%${sourceSets.main.output.resourcesDir}", "${mod_id}%%${sourceSets.main.output.classesDirs.asPath}", "${mod_id}%%${sourceSets.test.output.resourcesDir}", "${mod_id}%%${sourceSets.test.output.classesDirs.asPath}")
            environment 'target', 'fmltestserver'
            environment 'targetModId', "${mod_id}"
            args '-mixin.config=' + mod_id + '.mixins.json', '--crashOnFailedTests'
            forceExit false
            mods {
                notreepunching {
                    sources sourceSets.main, sourceSets.test
                }
            }
        }
    }
}


dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"

    compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")

    // runtimeOnly fg.deobf("libs:byg:1.2.3") // File: libs/byg-1.2.3.jar

    testImplementation fg.deobf("com.github.alcatrazEscapee:mcjunitlib:${mcjunitlib_version}-${mc_version}")
}

// Puts the mod version into the jar for mods.toml to read from
jar {
    manifest {
        attributes ([
            "Implementation-Version": "${project.version}",
            "MixinConfigs": "${mod_id}.mixins.json"
        ])
    }
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
}

// Automatically apply a license header when running checkLicense / updateLicense
license {
    header = project.file('HEADER.txt')

    include '**/*.java'
}

curseforge {
    project {
        def envApiKey = System.getenv('CURSEFORGE_API_KEY')
        apiKey = envApiKey == null ? 'nope' : envApiKey
    
        id = '289043' // No Tree Punching
        
        changelog = "[Release Notes ${version}](https://github.com/alcatrazEscapee/no-tree-punching/releases/tag/v${version})"
        changelogType = "markdown"
        
        releaseType = 'release'
        addGameVersion "${mc_version}"
    }
}